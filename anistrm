#!/usr/bin/env python3
# PYTHON_ARGCOMPLETE_OK

"""
A personal script to mpv an anime episode.

Required environment variables:
    `ANISTRM_URL`: The base URL to search from
    `ANISTRM_EXT`: The extension of expected videos

Optional environment variables:
    `ANISTRM_PROGRAM`: The program to use to play anime. Defaults to 'mpv',
    and can be overridden with the `--program` flag.

Author: metakirby5
"""

import re
import requests
from sys import exit
from os import environ
from subprocess import call
from bs4 import BeautifulSoup
from urllib.parse import unquote_plus
from urllib.parse import urljoin
from fuzzywuzzy import fuzz, process
from argparse import ArgumentParser, RawDescriptionHelpFormatter
from argcomplete import autocomplete

NUMS = re.compile(r'\b0+(\d)')


def exit_with(s):
    print('\033[31m{}\033[0m\n'.format(s))
    exit(1)


def normalize(s):
    return NUMS.sub(r'\1', s)


parser = ArgumentParser(description=__doc__,
                        formatter_class=RawDescriptionHelpFormatter)
parser.add_argument('--program',
                    help="program to use on the link",
                    nargs='?',
                    default=environ.get('ANISTRM_PROGRAM', 'mpv'),
                    type=str)
parser.add_argument('search_terms',
                    help="anime series + episode number",
                    nargs='+',
                    type=str)
autocomplete(parser)
args = parser.parse_args()
program = args.program.split(' ')
search_terms = normalize(' '.join(args.search_terms))

try:
    base = environ['ANISTRM_URL']
    ext = environ['ANISTRM_EXT']
except KeyError:
    exit_with("You need ANISTRM_URL and ANISTRM_EXT.")

link = base
while not link.endswith(ext):
    try:
        req = requests.get(link)
    except requests.exceptions.ConnectionError:
        exit_with("Could not reach \"{}\".".format(link))

    links = BeautifulSoup(req.text, 'html.parser').findAll('a')
    if not links:
        exit_with("Leaf link \"{}\" is not a video.".format(link))

    _, _, path = process.extractOne(
        search_terms, {l.get('href'): normalize(l.string) for l in links},
        scorer=fuzz.token_set_ratio)

    link = urljoin(base, path)
    print('-> {}'.format(unquote_plus(link)))
program.append(link)
call(program)

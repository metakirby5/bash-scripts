#!/usr/bin/env python3
# PYTHON_ARGCOMPLETE_OK

"""
Uses the  kitsu.io API and anilist.co API to tell you what episodes you need to
catch up on. Series limit is 500.

Required environment variables:
    $OAUTH2_ANILIST_ID, $OAUTH2_ANILIST_SECRET: anilist.co Oauth2 credentials.
Optional environment variables:
    $KITSU_USERNAME: The default username to check. Can be overridden with the
        `username` arg.

Author: metakirby5
"""

import os
import re
import requests
import json
import pytz
import tzlocal
from sys import exit
from os import environ
from datetime import datetime, timedelta
from humanize import naturaltime
from unidecode import unidecode
from argparse import ArgumentParser, RawDescriptionHelpFormatter
from argcomplete import autocomplete

# Constants and helpers
KT_API = 'https://kitsu.io/api/edge/'
AL_API = 'https://anilist.co/api/'
KT_CACHE = os.path.expanduser('~/.cache/kitsu/usernames')
AL_TOKEN = os.path.expanduser('~/.local/tokens/anilist/client')
END = '\033[0m'
SEASONS = ('winter', 'spring', 'summer', 'fall')
RE_LONG_VOWELS = re.compile(r'([aeiou])\1+')
RE_REPLACES = [(re.compile(pat), replacewith) for pat, replacewith in [
    (r' \([^)]*\)', r''),                 # (TV), (Web), etc
    (r'(\d)(st|nd|rd|th) Season', r'\1')  # nth Season
]]
OVERRIDES = {
    'Youjo Senki: Saga of Tanya the Evil': 'Youjo Senki',
    'Kobayashi-san Chi no Maid Dragon': 'Kobayashi-san Chi no Maidragon',
    'Yuuki Yuuna wa Yuusha de Aru: Yuusha no Shou':
    'Yuuki Yuuna wa Yuusha de Aru: Washio Sumi no Shou / Yuusha no Shou',
}


def normalize(s):
    s = OVERRIDES.get(s, s)
    for regex, replacewith in RE_REPLACES:
        s = regex.sub(replacewith, s)
    s = RE_LONG_VOWELS.sub(r'\1', s)
    s = ''.join(c.lower() for c in unidecode(s) if c.isalnum())
    return s


def red(s):
    return '\033[31m{}{}'.format(s, END)


def green(s):
    return '\033[32m{}{}'.format(s, END)


def yellow(s):
    return '\033[33m{}{}'.format(s, END)


def exit_with(s):
    print('{}\n'.format(red(s)))
    exit(1)


# Get environment variables
try:
    AL_ID = os.environ['OAUTH2_ANILIST_ID']
    AL_SECRET = os.environ['OAUTH2_ANILIST_SECRET']
except KeyError:
    exit_with('Environment variables $OAUTH2_ANILIST_ID '
              'and $OAUTH2_ANILIST_SECRET required.')


# Parse args
parser = ArgumentParser(description=__doc__,
                        formatter_class=RawDescriptionHelpFormatter)
parser.add_argument('--porcelain',
                    help="only output unwatched as [series] [episode #]",
                    action='store_true')
parser.add_argument('-v',
                    help="verbose",
                    action='store_true')
parser.add_argument('username',
                    help="kitsu.io username",
                    nargs='?',
                    type=str,
                    default=environ.get('KITSU_USERNAME'))
autocomplete(parser)
args = parser.parse_args()
porcelain = args.porcelain
verbose = args.v
username = args.username

if not username:
    exit_with("No username provided.")


# Printing functions
def human(s=''):
    if not porcelain:
        print(s)


def machine(s=''):
    if porcelain:
        print(s)


def json_pp(d):
    return json.dumps(d, sort_keys=True, indent=4, separators=(',', ': '))


def get_json(url, params={}):
    return json.loads(requests.get(url, params=params).text)


# Get user ID
os.makedirs(KT_CACHE, exist_ok=True)
KT_CACHED_UID = os.path.join(KT_CACHE, username)
try:
    with open(KT_CACHED_UID, 'r') as f:
        uid = int(f.read())
except FileNotFoundError:
    human('Fetching user ID for {}...'.format(username))
    try:
        uid = get_json(KT_API + 'users', params={
            'fields[users]': 'id',
            'filter[name]': username,
        })['data'][0]['id']
    except OSError:
        exit_with("Could not reach kitsu.io.")
    except ValueError:
        exit_with("{} isn't on kitsu.io.".format(username))
    with open(KT_CACHED_UID, 'w') as f:
        f.write(uid)


# Get your currently watching anime
human('Fetching library entries...'.format(uid))
kt = get_json(KT_API + 'library-entries', params={
    'page[limit]': 500,
    'include': 'anime',
    'fields[libraryEntries]': 'progress,anime',
    'fields[anime]': 'titles,canonicalTitle,episodeCount',
    'filter[status]': 'current',
    'filter[userId]': uid,
})

if not kt['data']:
    exit_with("{} isn't watching anything.".format(username))

anime_by_id = {
    a['id']: a['attributes']
    for a in kt['included']
}

# Get anilist.co credentials if needed
os.makedirs(os.path.dirname(AL_TOKEN), exist_ok=True)
try:
    now_utc = datetime.now(tzlocal.get_localzone()).astimezone(pytz.utc)
    with open(AL_TOKEN, 'r') as f:
        token = json.load(f)
        expiry = datetime.fromtimestamp(
            token['expires'] - 60, pytz.utc)
        if expiry < now_utc:
            raise IOError
except:
    human('Authenticating with anilist.co...')

    # Delete existing token
    try:
        os.remove(AL_TOKEN)
    except OSError:
        pass

    content = requests.post(
        AL_API + 'auth/access_token',
        data={
            'grant_type': 'client_credentials',
            'client_id': AL_ID,
            'client_secret': AL_SECRET,
        }).text
    token = json.loads(content)
    if 'error' in token:
        exit_with('Error. {error}: {error_description}'.format(**token))
    with open(AL_TOKEN, 'w') as f:
        f.write(content)

# Get currently airing anime
human('Fetching currently airing series from anilist.co...')
ac = []
now = datetime.now()
season_num = (now.month - 1) // 3
seasons = [SEASONS[season_num - 1], SEASONS[season_num]]
try:
    for season in seasons:
        human('Getting season {} {}...'.format(season, now.year))
        ac += get_json(
            AL_API + 'browse/anime',
            params={
                'access_token': token['access_token'],
                'year': now.year,
                'season': season,
                'full_page': 'true',
                'airing_data': 'true',
            })
except OSError:
    exit_with("Could not reach anilist.co.")
except ValueError:
    exit_with("Malformed anichart.net JSON.")

airing = {}
if verbose:
    human('=== AIRING ===')
for a in ac:
    airing[normalize(a['title_romaji'])] = a['airing']
    # Sometimes kitsu.io will put english for romaji...
    airing[normalize(a['title_english'])] = a['airing']
    if verbose:
        human('\n{}:\n{}'.format(a['title_romaji'], json_pp(a)))

# Create list of series
anime = []
if verbose:
    human('=== KITSU ===')
for info in kt['data']:
    attrs = info['attributes']
    attrs.update(anime_by_id[info['relationships']['anime']['data']['id']])
    # For currently airing shows, pull in next episode attrs
    attrs.update(airing.get(normalize(attrs['titles']['en_jp'])) or {})
    anime.append(attrs)
    if verbose:
        human('\n{}:\n{}'.format(attrs['canonicalTitle'], json_pp(attrs)))
anime.sort(key=lambda i: i['canonicalTitle'])

# Print info
human()
for a in anime:
    title = a['canonicalTitle']
    cur = a['progress']
    total = a['episodeCount']

    try:
        available = a['next_episode'] - 1
    except KeyError:
        available = total

    # Only bother if we haven't finished the series
    if not total or cur < total:
        # If we're waiting for next episode
        if not available or cur == available:
            # Create human-readable countdown
            try:
                time = naturaltime(
                    now + timedelta(seconds=a['countdown'])
                ).replace(
                    ' from now', ''
                ).replace(
                    'hour', 'hr'
                ).replace(
                    'minute', 'min'
                ).replace(
                    'second', 'sec'
                )
            # Unknown time
            except KeyError:
                time = 'UNKNOWN'
            status = green(time)
        # If we're behind
        elif cur < available:
            printer = yellow if available == total else green
            status = printer('{}/{}'.format(cur, available))
            machine(u'{} {}'.format(title, cur + 1))
        # Invalid state
        else:
            status = red('INVALID')
    # We need to mark this as complete
    else:
        status = red('COMPLTE')

    # Status must be colored to be padded correctly
    human(u'{:>16} {}'.format(status, title))
human()
